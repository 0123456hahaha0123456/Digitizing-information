import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.io.*;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.TreeMap;

public class frameWork extends javax.swing.JFrame {
    private static DatagramSocket ds ;
    ArrayList<People> arr;
    String colour[] = {"red","black","green","magenta","yellow"};
    private String fileName = "input.txt";

    private static peopleMap5 mp;
    ArrayList<Rectangle> rect;

    /**
     * Creates new form frame
     */
    private DefaultTreeModel model;

    public frameWork() throws SQLException{
        try{
            ds = new DatagramSocket();
        }catch (IOException e){}
        DBConnection.getConnection();
        initComponents();
        model =(DefaultTreeModel) jTree1.getModel();
        sendToClient();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() throws SQLException{
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Data");
        createNodes(treeNode1);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));

        jScrollPane1.setViewportView(jTree1);

        setFieldText();

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    jButton1ActionPerformed(evt);
                }catch (SQLException e){
                    System.out.println("SQL was wrong");
                }
            }
        });

        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    jButton2ActionPerformed(evt);
                }catch (SQLException e){
                    System.out.println("SQL was wrong");
                }
            }
        });

        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try{
                    jButton3ActionPerformed(evt);
                }catch (SQLException e){
                    System.out.println("SQL was wrong");
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(94, 94, 94)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jTextField1)
                                                .addComponent(jTextField4, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(134, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(29, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>

    private void setFieldText(){
        jTextField1.setText("Age1");
        jTextField2.setText("Name2");
        jTextField3.setText("onTv3");
        jTextField4.setText("Job4");
    }
    private void createNodes(DefaultMutableTreeNode top) throws SQLException {
        DefaultMutableTreeNode  person ;
        person = new DefaultMutableTreeNode("People");
        top.add(person);
        try{
            initTree(person);
        }catch (IOException e){
            System.out.println("No file");
        }
    }
    private void setCordinatePeople(People duc){
        duc.setCordinate();
    }

    private ArrayList<People> getPeopleFromDB() throws SQLException{
        ArrayList<People> arr = new ArrayList<>();
        ResultSet rs = DBConnection.execQuery("SELECT * FROM people");
        while(rs.next()){
            String name = rs.getString(2);
            String age = String.valueOf(rs.getInt(3));
            String job = rs.getString(4);
            String onTV = rs.getString(5);
            People temp = getPeople(name,age.toString(),job,onTV);
            arr.add(temp);
        }
        id = getMaxID()+1;
        return arr;
    }

    // create tree, show key of People
    private void initTree(DefaultMutableTreeNode person) throws IOException,SQLException{
        //read file input to import people
        arr = getPeopleFromDB();
        this.mp = new peopleMap5(arr);

        //initRect(arr);

        DefaultMutableTreeNode duc;

        for(int i=0;i<arr.size();i++) {
            setCordinatePeople(arr.get(i));
            //duc = new DefaultMutableTreeNode(rect.get(i).getPeople());
            duc = new DefaultMutableTreeNode(arr.get(i));
            person.add(duc);
        }
    }
    private int getMaxID() throws SQLException{
        int res = 0;
        ResultSet rs =DBConnection.execQuery("SELECT * FROM people");
        while (rs.next()){
            int tmp = Integer.parseInt(rs.getString(1));
            if (tmp>res) res = tmp;
        }
        return res;
    }
    // get People from 4 feildtext
    private People getPeople(String _name,String _age,String _job,String _onTv){
        try{
            int age = Integer.parseInt(_age);
            Job job = Job.valueOf(_job.toUpperCase());
            boolean onTv = Boolean.valueOf(_onTv);
            People duc = new People(_name,age,job,onTv);
            return duc;
        }
        catch (Exception e){
            return null;
        }
    }
    //add button
    //we can't have duplicate key, so if we have two people with same name and age, this means we will create new one
    private DefaultMutableTreeNode selectedNode;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException{
        selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (selectedNode != null){
            String name = jTextField2.getText();
            String age = jTextField1.getText();
            String job = jTextField4.getText();
            String onTv = jTextField3.getText();
            People duc = getPeople(name,age,job,onTv);
            if (duc!= null) {
                DBConnection.insertDB("people",id,duc);
                id++;
                mp.add(duc);
                setCordinatePeople(duc);
                try {selectedNode.insert(new DefaultMutableTreeNode(duc),selectedNode.getIndex(selectedNode.getLastChild()));}
                catch (NoSuchElementException e ){JOptionPane.showMessageDialog(this, "node has no children");}
                model.reload(selectedNode);
                sendToClient();
            }
        }
        setFieldText();

    }
    //edit button
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {
        People _tmp = null;
        selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        if (selectedNode.isLeaf()) {
            _tmp = (People) selectedNode.getUserObject();

            if (selectedNode != null) {
                String name = jTextField2.getText();
                String age = jTextField1.getText();
                String job = jTextField4.getText();
                String onTv = jTextField3.getText();
                People duc = getPeople(name, age, job, onTv);
                if (duc != null) {
                    //setCordinatePeople(duc);
                    duc.setColor(_tmp.getColor());
                    duc.setCorX(_tmp.getCorX());
                    duc.setCorY(_tmp.getCorY());
                    duc.setWidth(_tmp.getWidth());
                    duc.setHeight(_tmp.getHeight());
                    mp.add(duc);

                    String _duc = selectedNode.toString();
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode.getParent();
                    parent.remove(selectedNode);
                    //DBConnection.deleteDB("people",_duc);
                    mp.remove(_duc);
                    parent.insert(new DefaultMutableTreeNode(duc), parent.getIndex(parent.getLastChild()));
                    DBConnection.updateDB("people",_duc,duc);
                    model.reload(parent);
                    sendToClient();
                }
            }
        }
        setFieldText();

    }
    //delete button
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) throws SQLException{
        selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
        try{
            if (selectedNode.getFirstChild() != null) {JOptionPane.showMessageDialog(this, "Pls don't delete this tree"); return;}
        } catch (NoSuchElementException e){}
        if (selectedNode != null){
            String duc = selectedNode.toString();
            DefaultMutableTreeNode parent = (DefaultMutableTreeNode) selectedNode.getParent();
            parent.remove(selectedNode);
            DBConnection.deleteDB("people",duc);
            mp.remove(duc);
            model.reload(parent);
            sendToClient();
        }
        //for(int i=0;i<rect.size();i++) System.out.println(rect.get(i).getPeople());
        setFieldText();

    }

    //send data void
    public static void sendToClient(){
        frameThread thread = new frameThread(mp,ds);
        thread.run();
    }


    public static void solve(){
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frameWork.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try{
                new frameWork().setVisible(true);
            }catch (SQLException e){
                System.out.println("SQL wrong!!");
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTree jTree1;
    private DBConnection DBConnection = new DBConnection();
    private int id;
    // End of variables declaration                   
}


class frameThread implements Runnable{
    private ArrayList<People> arr ;
    private DatagramSocket ds;
    public frameThread(peopleMap5 mp,DatagramSocket ds){
        this.ds = ds;
        arr = new ArrayList<>();
        init(mp);
    }
    private void init(peopleMap5 mp){
        TreeMap<String, People> _arr = mp.getArr();
        for(int i =0;i< _arr.size();i++){
            String key = (String) _arr.keySet().toArray()[i];
            People tmp = _arr.get(key);
            arr.add(tmp);
        }
    }
    @Override
    public synchronized void run(){
        try{

           // Request request = new Request(arr);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(arr);
            oos.flush();

            byte[] b = baos.toByteArray();
            InetAddress ia = InetAddress.getLocalHost();
            DatagramPacket sendPacket = new DatagramPacket(b, b.length, ia, 1302);
            this.ds.send(sendPacket);
            System.out.println("data is sent");

        }
        catch (IOException e){
            System.out.println("What a beautiful LA!");
            e.printStackTrace();
        }
    }
}